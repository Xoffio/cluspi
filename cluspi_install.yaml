- hosts: all

  vars_prompt:
    - name: db_user
      prompt: db_user
      private: false
    - name: db_pass
      prompt: db_pass
      private: true
    - name: db_ip
      prompt: db ip and port IP:PORT
      private: false
    - name: db_table
      prompt: db_table
      private: false

  tasks:
  - name: Install the main control node
    shell: >
      curl -sfL https://get.k3s.io | INSTALL_K3S_CHANNEL=v1.24 sh -s - server
      --datastore-endpoint='mysql://{{ db_user }}:{{ db_pass }}@tcp({{ db_ip }})/{{ db_table }}'
      --disable servicelb
      --write-kubeconfig-mode 644
    register: ku_main_control_installation
    when: inventory_hostname in groups['main_control']

  - name: Uninstall k3s when failed
    command: /usr/local/bin/k3s-uninstall.sh
    when: 
      - hostvars[groups['main_control'][0]].ku_main_control_installation.failed 
      - inventory_hostname in groups['main_control']

  - name: Installation Failed
    fail:
      msg: Installation Failed
    when: hostvars[groups['main_control'][0]].ku_main_control_installation.failed

  - name: Get token from main control
    become: yes
    command: cat /var/lib/rancher/k3s/server/node-token
    register: ku_token
    when: inventory_hostname in groups['main_control']

  - name: Create the token holder
    add_host:
      name: token_holder
      token: "{{ ku_token.stdout }}"
      control_ip: "{{ hostvars[groups['main_control'][0]].ansible_default_ipv4.address }}"

  - name: Install the rest of control nodes
    shell: >
      curl -sfL https://get.k3s.io | INSTALL_K3S_CHANNEL=v1.24 sh -s - server 
      --token {{ hostvars.token_holder.token }}
      --datastore-endpoint='mysql://{{ db_user }}:{{ db_pass }}@tcp({{ db_ip }})/{{ db_table }}'
      --disable servicelb \
      --write-kubeconfig-mode 644
    when: inventory_hostname in groups['control']

  - name: Install worker nodes k3s
    shell: >
      curl -sfL https://get.k3s.io | INSTALL_K3S_CHANNEL=v1.24 sh -s - agent
      --token {{ hostvars.token_holder.token }}
      --server 'https://{{ hostvars.token_holder.control_ip }}:6443'
      --node-name '{{ ansible_hostname }}'
    when: inventory_hostname in groups['workers']

  # --- Install MetalLB ---
  - name: Create Cluspi build directory
    file:
      path: /tmp/cluspi/build
      state: directory

  - name: Copy kustomization.yaml file
    ansible.builtin.copy:
        src: conf/kustomization.yaml
        dest: /tmp/cluspi/build/

  - name: Install MetalLB
    shell: >
      kubectl apply -k /tmp/cluspi/build
    when: inventory_hostname in groups['main_control']

  - name: Copy the MetalLB conf file
    ansible.builtin.copy:
        src: conf/metallb-conf.yaml
        dest: /tmp/cluspi/
        mode: '0664'

  - name: Pause for 60 sec to apply MetalLB configurations
    ansible.builtin.pause:
      seconds: 60

  - name: Apply the MetalLB configurations
    shell: >
      kubectl apply -f /tmp/cluspi/metallb-conf.yaml >> /tmp/cluspi/metallb-conf.log
    when: inventory_hostname in groups['main_control'] 